{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class Service {\n  // putting HttpClient\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.url = 'https://localhost:44485/api/Calculator';\n    this.header = {\n      'Content-Type': 'application/json'\n    };\n    // Headers\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  // Calculator\n  Calculate(calculator) {\n    //return this.httpClient.post<Model>(this.url + \"/calc/\",\n    //  calculator, this.httpOptions);\n    return this.httpClient.get(this.url + '/' + calculator).pipe(retry(2), catchError(this.handleError));\n  }\n  // erros\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Erro client\n      errorMessage = error.error.message;\n    } else {\n      // Erro server\n      errorMessage = `Error code: ${error.status}, ` + `Msn: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n}\nService.ɵfac = function Service_Factory(t) {\n  return new (t || Service)(i0.ɵɵinject(i1.HttpClient));\n};\nService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: Service,\n  factory: Service.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,KAAK,QAAQ,gBAAgB;AAElD,SAAwCC,WAAW,QAAQ,sBAAsB;;;AAMjF,OAAM,MAAOC,OAAO;EAKlB;EACAC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAJ9B,QAAG,GAAG,wCAAwC;IAC9C,WAAM,GAAG;MAAE,cAAc,EAAE;IAAkB,CAAE;IAK/C;IACA,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIJ,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAL6C;EAO9C;EACAK,SAAS,CAACC,UAAe;IAEvB;IACA;IAEA,OAAO,IAAI,CAACH,UAAU,CAACI,GAAG,CAAQ,IAAI,CAACC,GAAG,GAAG,GAAG,GAAGF,UAAU,CAAC,CAC3DG,IAAI,CACHV,KAAK,CAAC,CAAC,CAAC,EACRD,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACL;EAEA;EACAA,WAAW,CAACC,KAAwB;IAClC,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,IAAI,GAAG,QAAQJ,KAAK,CAACG,OAAO,EAAE;;IAE1EE,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IACzB,OAAOf,UAAU,CAACe,YAAY,CAAC;EACjC;;AAtCWX,OAAO;mBAAPA,OAAO;AAAA;AAAPA,OAAO;SAAPA,OAAO;EAAAiB,SAAPjB,OAAO;EAAAkB,YAFN;AAAM","names":["throwError","catchError","retry","HttpHeaders","Service","constructor","httpClient","headers","Calculate","calculator","get","url","pipe","handleError","error","errorMessage","ErrorEvent","message","status","console","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Frank Coelho\\OneDrive\\Test\\CalculatorTest\\CalculatorTest\\CalculatorTest.Web\\ClientApp\\src\\app\\services\\calculator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { Model } from '../model/calculator-view-model';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Service {\n\n  url = 'https://localhost:44485/api/Calculator';\n  header = { 'Content-Type': 'application/json' };\n\n  // putting HttpClient\n  constructor(private httpClient: HttpClient) { }\n\n  // Headers\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  }\n\n  // Calculator\n  Calculate(calculator: any): Observable<Model> {\n\n    //return this.httpClient.post<Model>(this.url + \"/calc/\",\n    //  calculator, this.httpOptions);\n\n    return this.httpClient.get<Model>(this.url + '/' + calculator)\n      .pipe(\n        retry(2),\n        catchError(this.handleError)\n      );\n  }\n\n  // erros\n  handleError(error: HttpErrorResponse) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Erro client\n      errorMessage = error.error.message;\n    } else {\n      // Erro server\n      errorMessage = `Error code: ${error.status}, ` + `Msn: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  };\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}