{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet CalculatorComponent = class CalculatorComponent {\n  constructor(CalculatorService) {\n    this.CalculatorService = CalculatorService;\n    this.input = '';\n    this.result = '';\n    this.Calculator = {};\n  }\n  pressNum(num) {\n    //Do Not Allow . more than once\n    if (num == \".\") {\n      if (this.input != \"\") {\n        const lastNum = this.getLastOperand();\n        console.log(lastNum.lastIndexOf(\".\"));\n        if (lastNum.lastIndexOf(\".\") >= 0) return;\n      }\n    }\n    //Do Not Allow 0 at beginning. \n    //Javascript will throw Octal literals are not allowed in strict mode.\n    if (num == \"0\") {\n      if (this.input == \"\") {\n        return;\n      }\n      const PrevKey = this.input[this.input.length - 1];\n      if (PrevKey === '/' || PrevKey === '*' || PrevKey === '-' || PrevKey === '+') {\n        return;\n      }\n    }\n    this.input = this.input + num;\n    this.calcAnswer();\n  }\n  getLastOperand() {\n    let pos;\n    console.log(this.input);\n    pos = this.input.toString().lastIndexOf(\"+\");\n    if (this.input.toString().lastIndexOf(\"-\") > pos) pos = this.input.lastIndexOf(\"-\");\n    if (this.input.toString().lastIndexOf(\"*\") > pos) pos = this.input.lastIndexOf(\"*\");\n    if (this.input.toString().lastIndexOf(\"/\") > pos) pos = this.input.lastIndexOf(\"/\");\n    console.log('Last ' + this.input.substr(pos + 1));\n    return this.input.substr(pos + 1);\n  }\n  pressOperator(op) {\n    //Do not allow operators more than once\n    const lastKey = this.input[this.input.length - 1];\n    if (lastKey === '/' || lastKey === '*' || lastKey === '-' || lastKey === '+') {\n      return;\n    }\n    this.input = this.input + op;\n    this.calcAnswer();\n  }\n  clear() {\n    if (this.input != \"\") {\n      this.input = this.input.substr(0, this.input.length - 1);\n    }\n  }\n  allClear() {\n    this.result = '';\n    this.input = '';\n  }\n  calcAnswer() {\n    let formula = this.input;\n    let lastKey = formula[formula.length - 1];\n    if (lastKey === '.') {\n      formula = formula.substr(0, formula.length - 1);\n    }\n    lastKey = formula[formula.length - 1];\n    if (lastKey === '/' || lastKey === '*' || lastKey === '-' || lastKey === '+' || lastKey === '.') {\n      formula = formula.substr(0, formula.length - 1);\n    }\n    console.log(\"Formula \" + formula);\n    this.result = eval(formula);\n  }\n  getAnswer() {\n    this.calcAnswer();\n    this.input = this.result;\n    if (this.input == \"0\") this.input = \"\";\n  }\n};\nCalculatorComponent = __decorate([Component({\n  selector: 'ng-calculator',\n  templateUrl: './calculator.component.html'\n})], CalculatorComponent);\nexport { CalculatorComponent };","map":{"version":3,"mappings":"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","names":["Component","CalculatorComponent","constructor","CalculatorService","pressNum","num","input","lastNum","getLastOperand","console","log","lastIndexOf","PrevKey","length","calcAnswer","pos","toString","substr","pressOperator","op","lastKey","clear","allClear","result","formula","eval","getAnswer","selector","templateUrl"],"sourceRoot":"","sources":["C:\\Users\\Frank Coelho\\OneDrive\\Test\\CalculatorTest\\CalculatorTest\\CalculatorTest.Web\\ClientApp\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n})\r\n\r\n\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Calculator } from '../model/calculator-view-model';\r\nimport { CalculatorService } from \"../calculator/calculator.service\";\r\n\r\n\r\n@Component({\r\n  selector: 'ng-calculator',\r\n  templateUrl: './calculator.component.html',\r\n})\r\nexport class CalculatorComponent {\r\n\r\n\r\n  input: string = '';\r\n  result: string = '';\r\n  Calculator = {} as Calculator;\r\n\r\n  constructor(private CalculatorService: CalculatorService) { }\r\n\r\n\r\n\r\n  pressNum(num: string) {\r\n\r\n    //Do Not Allow . more than once\r\n    if (num == \".\") {\r\n      if (this.input != \"\") {\r\n\r\n        const lastNum = this.getLastOperand()\r\n        console.log(lastNum.lastIndexOf(\".\"))\r\n        if (lastNum.lastIndexOf(\".\") >= 0) return;\r\n      }\r\n    }\r\n\r\n    //Do Not Allow 0 at beginning. \r\n    //Javascript will throw Octal literals are not allowed in strict mode.\r\n    if (num == \"0\") {\r\n      if (this.input == \"\") {\r\n        return;\r\n      }\r\n      const PrevKey = this.input[this.input.length - 1];\r\n      if (PrevKey === '/' || PrevKey === '*' || PrevKey === '-' || PrevKey === '+') {\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.input = this.input + num\r\n    this.calcAnswer();\r\n  }\r\n\r\n\r\n  getLastOperand() {\r\n    let pos: number;\r\n    console.log(this.input)\r\n    pos = this.input.toString().lastIndexOf(\"+\")\r\n    if (this.input.toString().lastIndexOf(\"-\") > pos) pos = this.input.lastIndexOf(\"-\")\r\n    if (this.input.toString().lastIndexOf(\"*\") > pos) pos = this.input.lastIndexOf(\"*\")\r\n    if (this.input.toString().lastIndexOf(\"/\") > pos) pos = this.input.lastIndexOf(\"/\")\r\n    console.log('Last ' + this.input.substr(pos + 1))\r\n    return this.input.substr(pos + 1)\r\n  }\r\n\r\n\r\n  pressOperator(op: string) {\r\n\r\n    //Do not allow operators more than once\r\n    const lastKey = this.input[this.input.length - 1];\r\n    if (lastKey === '/' || lastKey === '*' || lastKey === '-' || lastKey === '+') {\r\n      return;\r\n    }\r\n\r\n    this.input = this.input + op\r\n    this.calcAnswer();\r\n  }\r\n\r\n\r\n  clear() {\r\n    if (this.input != \"\") {\r\n      this.input = this.input.substr(0, this.input.length - 1)\r\n    }\r\n  }\r\n\r\n  allClear() {\r\n    this.result = '';\r\n    this.input = '';\r\n  }\r\n\r\n  calcAnswer() {\r\n    let formula = this.input;\r\n\r\n    let lastKey = formula[formula.length - 1];\r\n\r\n    if (lastKey === '.') {\r\n      formula = formula.substr(0, formula.length - 1);\r\n    }\r\n\r\n    lastKey = formula[formula.length - 1];\r\n\r\n    if (lastKey === '/' || lastKey === '*' || lastKey === '-' || lastKey === '+' || lastKey === '.') {\r\n      formula = formula.substr(0, formula.length - 1);\r\n    }\r\n\r\n    console.log(\"Formula \" + formula);\r\n    this.result = eval(formula);\r\n  }\r\n\r\n  getAnswer() {\r\n    this.calcAnswer();\r\n    this.input = this.result;\r\n    if (this.input == \"0\") this.input = \"\";\r\n  }\r\n\r\n}\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}